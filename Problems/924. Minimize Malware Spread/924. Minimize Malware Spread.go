package main

import "sort"

func minMalwareSpread(graph [][]int, initial []int) int {
	num := len(graph)
	root := make([]int, num)
	for i := range root {
		root[i] = i
	}
	for i := range graph {
		for j := i + 1; j < num; j++ {
			if graph[i][j] == 1 {
				connect(root, i, j)
			}
		}
	}
	cnt := make(map[int]int)
	for i := range root {
		cnt[find(root, i)]++
	}
	//note, we need to identify if there are multiple malwares in current union, if so, delete one of them won't work
	cntmal := make([]int, num)
	for i := range initial {
		cntmal[find(root, initial[i])]++
	}
	sort.Slice(initial, func(a, b int) bool {
		if cnt[find(root, initial[a])] == cnt[find(root, initial[b])] {
			return initial[a] < initial[b]
		} else {
			return cnt[find(root, initial[a])] > cnt[find(root, initial[b])]
		}
	})
	for i := range initial {
		if cntmal[find(root, initial[i])] == 1 {
			return initial[i]
		}
	}
	return initial[0]
}

func find(root []int, a int) int {
	if root[a] != a {
		root[a] = find(root, root[a])
	}
	return root[a]
}

func connect(root []int, a, b int) {
	ra := find(root, a)
	rb := find(root, b)
	if ra != rb {
		root[ra] = rb
	}
}
